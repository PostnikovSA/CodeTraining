/*
SkillBox. HomeWork_4.8. Задание 3.2.

Author: Сергей Камянецкий.

Task: Write a program that allows you to add and subtract mathematical matrices.
Add the ability to enter the number of rows and columns of the matrix.
Add the ability to enter the mathematical operation of addition and subtraction.

Задача: Написать программу позволяющая складывать и вычитать математические матрицы.
Добавить возможность ввода количества строк и столбцов матрицы.
Добавить возможность ввода математического действия сложения и вычитания.
*/


using System;
using System.Linq;
using System.Threading;
class Program
{
    static void Main()
    {
        // Calculate the maximum multi-digit of possible numbers of integer types
        int MaxMultiDigit = 0;
        
        for (int i = 10; i < int.MaxValue / 2; i *= 10) MaxMultiDigit++;
   
   
        // Calculate a range of numbers to determine the number of padding elements
        int [] PositiveRangeNumOfPadding = new int [MaxMultiDigit];
        int [] NegativeRangeOfPadding = new int [MaxMultiDigit];
        
        int Count = 0;
        
        for (int i = 10; i < int.MaxValue / 2; i *= 10)
        {
            PositiveRangeNumOfPadding [Count] = i - 1;
            NegativeRangeOfPadding [Count] = (i*-1) + 1;
            Count++;
        }
        
        
        //for (int i = 0; i < OrderPadding.Length; i++)
        //{
        //    Console.WriteLine(OrderPadding[i]);
        //}
            
    
        // Create ranges from {MinNum} to {MaxNum}
        int MinNumAll = 1;
        int MaxNumRows = 50;
        int MaxNumColumns = 15;
        int MaxNumMatrix = 10000;
    
    
        // Enter number of Rows
        int Rows;
        while (true)
        {
            Console.Write($"Enter number of Rows in the range from {MinNumAll} to {MaxNumRows}: ");
            string s_Rows = Console.ReadLine();
            bool b_Rows = int.TryParse(s_Rows, out Rows);
            if ((b_Rows == true)&&(Rows >= MinNumAll)&&(Rows <= MaxNumRows)) break;
            else Console.WriteLine($"Error! Try again! Enter only whole numbers in the range from {MinNumAll} to {MaxNumRows}!\n");
        }
        Console.Clear();
        
        
        // Enter number of Columns 
        int Columns;
        while (true)
        {
            Console.Write($"Enter number of Columns in the range from {MinNumAll} to {MaxNumColumns}: ");
            string s_Columns = Console.ReadLine();
            bool b_Columns = int.TryParse(s_Columns, out Columns);
            if ((b_Columns == true)&&(Columns >= MinNumAll)&&(Columns <= MaxNumColumns)) break;
            else Console.WriteLine($"Error! Try again! Enter only whole numbers in the range from {MinNumAll} to {MaxNumColumns}!\n");
        }
        Console.Clear();
        
        
        // Create Random
        Random Randomize = new Random();
        
        
        // Create the Math Matrix 1 and Math Matrix 2   
        int [,] MathMatrix_1 = new int [Rows, Columns];
        int [,] MathMatrix_2 = new int [Rows, Columns];
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                MathMatrix_1[i,j] = Randomize.Next(MinNumAll,MaxNumMatrix+1);
                MathMatrix_2[i,j] = Randomize.Next(MinNumAll,MaxNumMatrix+1);
            }
        }
        
        
        // Enter the number to be multiplied by the original Math Matrix
        string MathAction;
        while (true)
        {
            Console.Write($"Enter math action either '+' or '-': ");
            MathAction = Console.ReadLine();
            if ((MathAction == "+")||(MathAction == "-")) break;
            else Console.WriteLine($"Error! Try again! Enter math action either '+' or '-'\n");
        }
        Console.Clear();
        
        
        // Create the New Math Matrix
        int [,] NewMathMatrix = new int [Rows, Columns];
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                if (MathAction == "+") NewMathMatrix[i,j] = MathMatrix_1[i,j] + MathMatrix_2[i,j];
                if (MathAction == "-") NewMathMatrix[i,j] = MathMatrix_1[i,j] - MathMatrix_2[i,j];
            }
        }
        
       
        // Draw Math Matrix_1
        Console.WriteLine($"Math Matrix_1:");
        Thread.Sleep(10);
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                for (int k = 0; k < PositiveRangeNumOfPadding.Length; k++)
                {
                    if (MathMatrix_1[i,j] > PositiveRangeNumOfPadding[k]) Console.Write($"");
                    else Console.Write($" ");
                }
                Console.Write($"{MathMatrix_1[i,j]}");
                Thread.Sleep(10);
            }
            Console.WriteLine();
        }
        
        
        // Draw Math Matrix_2
        Console.WriteLine($"\nMath Matrix_2:");
        Thread.Sleep(10);
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                for (int k = 0; k < PositiveRangeNumOfPadding.Length; k++)
                {
                    if (MathMatrix_2[i,j] > PositiveRangeNumOfPadding[k]) Console.Write($"");
                    else Console.Write($" ");
                }
                Console.Write($"{MathMatrix_2[i,j]}");
                Thread.Sleep(10);
            }
            Console.WriteLine();
        }
        
        
        // Draw Math action
        Console.WriteLine($"\nMath Action selected: \n'{MathAction}'");
   
   
        // Draw New Math Matrix
        Console.WriteLine($"\nNew Math Matrix:");
        Thread.Sleep(10);
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                for (int k = 0; k < PositiveRangeNumOfPadding.Length; k++)
                {
                    if (NewMathMatrix[i,j] >= 0) 
                        if (NewMathMatrix[i,j] <= PositiveRangeNumOfPadding[k]) 
                            Console.Write($" ");
                            
                    if (NewMathMatrix[i,j] < 0) 
                        if (NewMathMatrix[i,j] >= NegativeRangeOfPadding[k]) 
                            Console.Write($" ");
                }
                if (NewMathMatrix[i,j] >= 0) Console.Write($" {NewMathMatrix[i,j]}");
                else Console.Write($"{NewMathMatrix[i,j]}");
                Thread.Sleep(10);
            }
            Console.WriteLine();
        }
    }
}
