/*
SkillBox. HomeWork_4.8. Задание 2.

Author: Сергей Камянецкий.

Task: Create a visualization of Pascal's triangle with a maximum of 20 rows.

Задача: Создать визуализацию треугольника Паскаля с максимальным количеством строк: 20.
*/


using System;
using System.Linq;
class Program
{
    static void Main()
    {
        // Calculate the maximum multi-digit of possible numbers of integer types
        int MaxMultiDigit = 0;
        
        for (int i = 10; i < 100001 / 2; i *= 10) MaxMultiDigit++;
   
   
        // Calculate a range of numbers to determine the number of padding elements
        int [] PositiveRangeNumOfPadding = new int [MaxMultiDigit];
        
        int Count = 0;
        for (int i = 10; i < 100001 / 2; i *= 10)
            {
                PositiveRangeNumOfPadding [Count] = i-1;
                Count++;
            }
     
    
        // Numbers of row
        int n;
        Console.Write($"Enter how many rows there will be in pascal's triangle: ");
        while (true)
        {
            bool b_n = int.TryParse(Console.ReadLine(), out n);
            if ((b_n == true)&&(n < 21)&&(n > 0)) break;
            else Console.WriteLine($"Error! Enter only whole numbers in range 1 to 20. Try again");
        
        }


        // Create a jagged array
        int[][] TablePaskal = new int[n][];
        for (int i = 0; i < n; i++)
        {
            TablePaskal[i] = new int[i+1];
        }


        // Add values to a jagged array
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < TablePaskal[i].Length; j++)
            {
                if ((i == 0) && (j == 0)) TablePaskal[i][j] = 1; // Row 0       
                if (j == 0) TablePaskal[i][j] = 1; // First row
                if (j == 1) TablePaskal[i][j] = i; // Second row
                if (j == TablePaskal[i].Length - 1) TablePaskal[i][j] = 1; // Last row
                if (j == TablePaskal[i].Length - 2) TablePaskal[i][j] = i; // Penult row
                if ((j > 1) && (j < TablePaskal[i].Length - 2)) TablePaskal[i][j] = TablePaskal[i-1][j-1]+ TablePaskal[i-1][j]; // The sum of two numbers, the row higher above the diagonal
            }
        }


        // Draw Pascal's triangle
        int CountSpice;
        
        Console.WriteLine();
        for (int i = 0; i < n; i++)
        {
            CountSpice = (n-i) * 3;
            for(int l = 0; l < CountSpice; l++) Console.Write($" ");
            
            for (int j = 0;  j < TablePaskal[i].Length; j++)
            {
                for (int k = 0; k < PositiveRangeNumOfPadding.Length; k++)
                {
                    if (TablePaskal[i][j] >= 0) 
                        if (TablePaskal[i][j] <= PositiveRangeNumOfPadding[k]) 
                            Console.Write($" ");
                }
                Console.Write($"{TablePaskal[i][j]} ");
            }
            Console.WriteLine();
        }
        Console.WriteLine();
    }
}
