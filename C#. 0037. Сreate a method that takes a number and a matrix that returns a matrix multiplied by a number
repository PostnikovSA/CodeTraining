/*
SkillBox. HomeWork_5.5. Задание 1.1.

Author: Сергей Камянецкий.

Task: Write a program that allows you to multiply a mathematical matrix by a number.
Add the ability to enter the number of rows and columns of the matrix, as well as the number by which multiplication will be performed.
Сreate a method that takes a number and a matrix that returns a matrix multiplied by a number.

Задача: Написать программу позволяющая умножать математическую матрицу на число.
Добавить возможность ввода количества строк и столбцов матрицы, а также число на которое будет производится умножение.
Создать метод принимающий число и матрицу, возвращающий матрицу умноженное на число.
*/


using System;
using System.Linq;
using System.Threading;
class Program
{
    // Maximum multi-digit of possible numbers of integer types
    static int GetMaxMultiDigit()
    {
        int MaxMultiDigit = 0;
        
        for (int i = 10; i < int.MaxValue / 2; i *= 10) MaxMultiDigit++;
        return MaxMultiDigit;
    }
    
    
    // Number of indentation elements with a positive number
    static int [] GetPositiveRangeNumOfPadding (int MaxMultiDigit)
    {
        int [] PositiveRangeNumOfPadding = new int [MaxMultiDigit];
        int Count = 0;
        
        for (int i = 10; i < int.MaxValue / 2; i *= 10)
        {
            PositiveRangeNumOfPadding [Count] = i-1;
            Count++;
        }
        return PositiveRangeNumOfPadding;    
            
    }
        
        
    // Number of indentation elements with a negative number
    static int [] GetNegativeRangeNumOfPadding (int MaxMultiDigit)
    {
        int [] NegativeRangeOfPadding = new int [MaxMultiDigit];
        int Count = 0;
        
        for (int i = 10; i < int.MaxValue / 2; i *= 10)
            {
                NegativeRangeOfPadding [Count] = (i*-1)+1;
                Count++;
            } 
            return NegativeRangeOfPadding;
    }
    
    
    // Enter number of Rows
    static int GetRows (int MinNumAll, int MaxNumRows)
    {
        int Rows;
        while (true)
        {
            Console.Write($"Enter number of Rows in the range from {MinNumAll} to {MaxNumRows}: ");
            string s_Rows = Console.ReadLine();
            bool b_Rows = int.TryParse(s_Rows, out Rows);
            if ((b_Rows == true)&&(Rows >= MinNumAll)&&(Rows <= MaxNumRows)) break;
            else Console.WriteLine($"Error! Try again! Enter only whole numbers in the range from {MinNumAll} to {MaxNumRows}!\n");
        }
        return Rows;
    }
    
        
    // Enter number of Columns
    static int GetColumns (int MinNumAll, int MaxNumColumns)
    {
        int Columns;
        while (true)
        {
            Console.Write($"Enter number of Columns in the range from {MinNumAll} to {MaxNumColumns}: ");
            string s_Columns = Console.ReadLine();
            bool b_Columns = int.TryParse(s_Columns, out Columns);
            if ((b_Columns == true)&&(Columns >= MinNumAll)&&(Columns <= MaxNumColumns)) break;
            else Console.WriteLine($"Error! Try again! Enter only whole numbers in the range from {MinNumAll} to {MaxNumColumns}!\n");
        }
        return Columns;
    }
        
        
    // Create the original Math Matrix
        static int [,] GetMathMatrix(int Rows, int Columns, int MinNumAll, int MaxNumMatrix)
        {
            Random Randomize = new Random();
            
            int [,] MathMatrix = new int [Rows, Columns];
            
            for (int i = 0; i < Rows; i++)
            {
                for (int j = 0; j < Columns; j++)
                {
                    MathMatrix[i,j] = Randomize.Next(MinNumAll,MaxNumMatrix+1);
                }
            }
            return MathMatrix;
        }    
        
        
    // Draw Math Matrix
    static void DrawMathMatrix(int Rows, int Columns, int [] PositiveRangeNumOfPadding, int [,] MathMatrix)
    {
        Console.WriteLine($"Original Math Matrix:");
        Thread.Sleep(10);
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                for (int k = 0; k < PositiveRangeNumOfPadding.Length; k++)
                {
                    if (MathMatrix[i,j] > PositiveRangeNumOfPadding[k]) Console.Write($"");
                    else Console.Write($" ");
                }
                Console.Write($"{MathMatrix[i,j]}");
                Thread.Sleep(10);
            }
            Console.WriteLine();
        }
    }    
        
        
    // Enter the number to be multiplied by the original Math Matrix
    static int GetNumMultMathMatrix (int MinNumAll, int MinNumMatrix, int MaxNumMatrix)
    {
        int NumMultMathMatrix;
        
        while (true)
        {
            Console.Write($"Enter the number to be multiplied by the original Math Matrix in the range from {MinNumMatrix} to {MaxNumMatrix}: ");
            string s_NumMultMathMatrix = Console.ReadLine();
            bool b_NumMultMathMatrix = int.TryParse(s_NumMultMathMatrix, out NumMultMathMatrix);
            if ((b_NumMultMathMatrix == true)&&(NumMultMathMatrix >= MinNumMatrix)&&(NumMultMathMatrix <= MaxNumMatrix)) break;
            else Console.WriteLine($"Error! Try again! Enter only whole numbers in the range from {MinNumAll} to {MaxNumMatrix}!\n");
        }
        return NumMultMathMatrix;
    }     
        
        
    // Create the New Math Matrix
    static int [,] GetNewMathMatrix (int Rows, int Columns, int [,] MathMatrix, int NumMultMathMatrix)
    {
        int [,] NewMathMatrix = new int [Rows, Columns];
        
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                NewMathMatrix[i,j] = MathMatrix[i,j] * NumMultMathMatrix;
            }
        }
        return NewMathMatrix;
    }
        
        
    // Draw New Math Matrix
    static void DrawNewMathMatrix (int Rows, int Columns, int [] PositiveRangeNumOfPadding, int [] NegativeRangeOfPadding, int [,] NewMathMatrix)
    {
        Console.WriteLine($"New Math Matrix:");
        Thread.Sleep(10);
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                for (int k = 0; k < PositiveRangeNumOfPadding.Length; k++)
                {
                    if (NewMathMatrix[i,j] >= 0) 
                        if (NewMathMatrix[i,j] <= PositiveRangeNumOfPadding[k]) Console.Write($" ");
                    if (NewMathMatrix[i,j] < 0) 
                        if (NewMathMatrix[i,j] >= NegativeRangeOfPadding[k]) Console.Write($" ");
                }
                if (NewMathMatrix[i,j] < 0) Console.Write($"{ NewMathMatrix[i,j]}");
                else Console.Write($"{ NewMathMatrix[i,j]}");
                Thread.Sleep(10);
            }
            Console.WriteLine();
        }
    }
        
        
  
    static void Main()
    {
        // Maximum multi-digit of possible numbers of integer types
        int MaxMultiDigit = GetMaxMultiDigit();
   
        // Number of indentation elements with a positive number
        int [] PositiveRangeNumOfPadding = GetPositiveRangeNumOfPadding(MaxMultiDigit);
        
        // Number of indentation elements with a negative number
        int [] NegativeRangeOfPadding = GetNegativeRangeNumOfPadding(MaxMultiDigit);
     
        // Create ranges from {MinNum} to {MaxNum}
        int MinNumAll = 1;
        int MaxNumRows = 50;
        int MaxNumColumns = 15;
        int MinNumMatrix = -10000;
        int MaxNumMatrix = 10000;
    
        // Enter number of Rows
        int Rows = GetRows(MinNumAll,MaxNumRows);
        Console.Clear();
        
        // Enter number of Columns 
        int Columns = GetColumns(MinNumAll, MaxNumColumns);
        Console.Clear();
        
        // Create the original Math Matrix
        int [,] MathMatrix = GetMathMatrix (Rows, Columns, MinNumAll, MaxNumMatrix);
        
        // Enter the number to be multiplied by the original Math Matrix
        int NumMultMathMatrix = GetNumMultMathMatrix(MinNumAll, MinNumMatrix, MaxNumMatrix);
        Console.Clear();
        
        // Create the New Math Matrix
        int [,] NewMathMatrix = GetNewMathMatrix (Rows, Columns, MathMatrix, NumMultMathMatrix);
        
        // Draw Math Matrix
        DrawMathMatrix (Rows, Columns, PositiveRangeNumOfPadding, MathMatrix);
        
        // Draw the number to be multiplied by the original Math Matrix
        Console.WriteLine($"\nNumber to be multiplied:\n{NumMultMathMatrix}\n");
        Thread.Sleep(10);
        
        // Draw New Math Matrix
        DrawNewMathMatrix (Rows, Columns, PositiveRangeNumOfPadding, NegativeRangeOfPadding, NewMathMatrix);  
    }
}
